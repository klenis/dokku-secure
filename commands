#!/usr/bin/env bash

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

# Check if name is specified
if [[ $1 == secure ]] || [[ $1 == secure:* ]]; then
  if [[ -z $2 ]]; then
    echo "You must specify an app name"
    exit 1
  fi

  APP="$2"

  # Check if app exists with the same name
  if [ ! -d "$DOKKU_ROOT/$APP" ]; then
    echo "App $APP does not exist"
    exit 1
  fi
fi

case "$1" in

  secure)
  if [ -f $DOKKU_ROOT/$APP/SSL-* ]; then
    for SSL_FILE in $DOKKU_ROOT/$APP/SSL-*
    do
      cat $SSL_FILE
    done
  else
    echo "No config file found"
  fi
  ;;

  secure:set)
  if [[ -z "$3" ]]; then
    echo "Usage: dokku secure:set <app> <certificate> <ipv4> <ipv6> <domains...>"
    echo "Must specify a certificate."
    exit 1
  fi
  if [[ -z "$4" ]]; then
    echo "Usage: dokku secure:set <app> <certificate> <ipv4> <ipv6> <domains...>"
    echo "Must specify ipv4 address or '0.0.0.0'."
    exit 1
  fi
  if [[ -z "$5" ]]; then
    echo "Usage: dokku secure:set <app> <certificate> <ipv4> <ipv6> <domains...>"
    echo "Must specify ipv6 address or '::'."
    exit 1
  fi
  if [[ -z "${*:6}" ]]; then
    echo "Usage: dokku secure:set <app> <certificate> <ipv4> <ipv6> <domains...>"
    echo "Must specify at least one domain."
    exit 1
  fi

  CERTIFICATE_NAME="$3"
  IPV4="$4"
  IPV6="$5"
  DOMAINS="${*:6}"
  HOST=`grep server_name $DOKKU_ROOT/$APP/nginx.conf | sed -E "s/.*(server_name) (.*);.*/\2/"`
  SSL_FILE="$DOKKU_ROOT/$APP/SSL-$CERTIFICATE_NAME"
  PORT=$(< "$DOKKU_ROOT/$APP/PORT")

  [ -f "$DOKKU_ROOT/$APP/ssl/$CERTIFICATE_NAME.crt" ] || {
    echo "$DOKKU_ROOT/$APP/ssl/$CERTIFICATE_NAME.crt does not exist"
    exit 1
  }

  [ -f $DOKKU_ROOT/$APP/ssl/$CERTIFICATE_NAME.key ] || {
    echo "$DOKKU_ROOT/$APP/ssl/$CERTIFICATE_NAME.key does not exist"
    exit 1
  }

  echo "$CERTIFICATE_NAME $IPV4 $IPV6 $DOMAINS" > $SSL_FILE

  cat<<EOF > $DOKKU_ROOT/$APP/nginx-ssl-$CERTIFICATE_NAME.conf
upstream $APP-ssl-$CERTIFICATE_NAME { server 127.0.0.1:$PORT; }
server {
  listen      $IPV4:443 ssl spdy;
  listen      [$IPV6]:443 ssl spdy;
  server_name $DOMAINS;

  keepalive_timeout   70;
  add_header Alternate-Protocol 443:npn-spdy/2;

  ssl on;
  ssl_certificate     $DOKKU_ROOT/$APP/ssl/$CERTIFICATE_NAME.crt;
  ssl_certificate_key $DOKKU_ROOT/$APP/ssl/$CERTIFICATE_NAME.key;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;

  location    / {
    proxy_pass  http://$APP;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
  include /home/dokku/$APP/nginx.conf.d/*.conf;
}
EOF

  pluginhook nginx-pre-reload $APP
  sudo /etc/init.d/nginx reload
  ;;

  help)
  cat && cat<<EOF
    secure <app>                                               display the SSL config for an app
    secure:set <app> <certificate> <ipv4> <ipv6> <domains...>  setup SSL for an app
EOF
  ;;
esac
